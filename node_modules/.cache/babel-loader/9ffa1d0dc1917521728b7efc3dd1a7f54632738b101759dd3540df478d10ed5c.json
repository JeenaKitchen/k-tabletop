{"ast":null,"code":"import { themeConfig } from '../data/themeConfig';\nimport markdownService from './markdownService';\nclass ThemeService {\n  constructor() {\n    this.themes = null;\n    this.isLoading = false;\n    this.error = null;\n  }\n\n  // Combine static theme config with dynamic markdown dishes\n  async buildThemes() {\n    const themes = [];\n    for (const themeConfigItem of themeConfig) {\n      try {\n        const dishes = await markdownService.getRecipesForTheme(themeConfigItem.name);\n        themes.push({\n          ...themeConfigItem,\n          dishes: dishes\n        });\n      } catch (error) {\n        console.error(`Error loading recipes for theme ${themeConfigItem.name}:`, error);\n        // Add theme with empty dishes if recipes fail to load\n        themes.push({\n          ...themeConfigItem,\n          dishes: []\n        });\n      }\n    }\n    return themes;\n  }\n\n  // Get all themes with dishes from markdown\n  async getThemes(forceRefresh = false) {\n    if (this.themes && !forceRefresh) {\n      return {\n        themes: this.themes,\n        isLoading: false,\n        error: null\n      };\n    }\n    if (this.isLoading) {\n      return {\n        themes: this.themes,\n        isLoading: true,\n        error: this.error\n      };\n    }\n    this.isLoading = true;\n    this.error = null;\n    try {\n      this.themes = await this.buildThemes();\n      return {\n        themes: this.themes,\n        isLoading: false,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error loading themes:', error);\n      this.error = error.message;\n\n      // If we have cached themes, return them\n      if (this.themes) {\n        return {\n          themes: this.themes,\n          isLoading: false,\n          error: this.error\n        };\n      }\n\n      // Otherwise, return empty themes with error\n      return {\n        themes: [],\n        isLoading: false,\n        error: this.error\n      };\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  // Get a specific theme by index\n  async getTheme(index, forceRefresh = false) {\n    const result = await this.getThemes(forceRefresh);\n    const theme = result.themes[index] || null;\n    return {\n      theme,\n      isLoading: result.isLoading,\n      error: result.error\n    };\n  }\n\n  // Clear cache and force refresh\n  async refreshThemes() {\n    markdownService.clearCache();\n    this.themes = null;\n    return await this.getThemes(true);\n  }\n}\nexport default new ThemeService();","map":{"version":3,"names":["themeConfig","markdownService","ThemeService","constructor","themes","isLoading","error","buildThemes","themeConfigItem","dishes","getRecipesForTheme","name","push","console","getThemes","forceRefresh","message","getTheme","index","result","theme","refreshThemes","clearCache"],"sources":["/Users/eunjinjeong/k-tabletop/src/services/themeService.js"],"sourcesContent":["import { themeConfig } from '../data/themeConfig';\nimport markdownService from './markdownService';\n\nclass ThemeService {\n  constructor() {\n    this.themes = null;\n    this.isLoading = false;\n    this.error = null;\n  }\n\n  // Combine static theme config with dynamic markdown dishes\n  async buildThemes() {\n    const themes = [];\n\n    for (const themeConfigItem of themeConfig) {\n      try {\n        const dishes = await markdownService.getRecipesForTheme(themeConfigItem.name);\n        \n        themes.push({\n          ...themeConfigItem,\n          dishes: dishes\n        });\n      } catch (error) {\n        console.error(`Error loading recipes for theme ${themeConfigItem.name}:`, error);\n        // Add theme with empty dishes if recipes fail to load\n        themes.push({\n          ...themeConfigItem,\n          dishes: []\n        });\n      }\n    }\n\n    return themes;\n  }\n\n  // Get all themes with dishes from markdown\n  async getThemes(forceRefresh = false) {\n    if (this.themes && !forceRefresh) {\n      return {\n        themes: this.themes,\n        isLoading: false,\n        error: null\n      };\n    }\n\n    if (this.isLoading) {\n      return {\n        themes: this.themes,\n        isLoading: true,\n        error: this.error\n      };\n    }\n\n    this.isLoading = true;\n    this.error = null;\n\n    try {\n      this.themes = await this.buildThemes();\n      \n      return {\n        themes: this.themes,\n        isLoading: false,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error loading themes:', error);\n      this.error = error.message;\n      \n      // If we have cached themes, return them\n      if (this.themes) {\n        return {\n          themes: this.themes,\n          isLoading: false,\n          error: this.error\n        };\n      }\n      \n      // Otherwise, return empty themes with error\n      return {\n        themes: [],\n        isLoading: false,\n        error: this.error\n      };\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  // Get a specific theme by index\n  async getTheme(index, forceRefresh = false) {\n    const result = await this.getThemes(forceRefresh);\n    const theme = result.themes[index] || null;\n    \n    return {\n      theme,\n      isLoading: result.isLoading,\n      error: result.error\n    };\n  }\n\n  // Clear cache and force refresh\n  async refreshThemes() {\n    markdownService.clearCache();\n    this.themes = null;\n    return await this.getThemes(true);\n  }\n}\n\nexport default new ThemeService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}